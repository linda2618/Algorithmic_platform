{"ast":null,"code":"import { onMounted, reactive, ref } from 'vue';\nimport { getUserList, changeUserState, getEditUsers, putEditUsers } from '@/axios/apis';\nimport { ElMessage, resetFields } from 'element-plus';\nexport default {\n  __name: 'index',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const queryInfo = reactive({\n      query: \"\",\n      pagenum: 1,\n      pagesize: 10\n    });\n    const usersData = ref([]);\n    const total = ref(0);\n    //查询到的用户信息对象\n    const editForm = ref({});\n    const labelPosition = ref('left');\n    const editFromRef = ref();\n    //修改用户对话框的显示与隐藏\n    const editDialogVisible = ref(false);\n\n    //验证邮箱的规则\n    var checkEmail = (rule, value, cb) => {\n      //验证邮箱的正则表达式\n      const regEmail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\\.[a-zA-Z0-9_-])+/;\n      if (regEmail.test(value)) {\n        return cb();\n      }\n      cb(new Error(\"请输入合法的邮箱!\"));\n    };\n\n    //验证电话的规则\n    var checkMobile = (rule, value, cb) => {\n      //验证电话的正则表达式\n      let regMobile = /^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]{8}$/;\n      if (regMobile.test(value)) {\n        cb();\n      } else {\n        cb(new Error(\"手机号码格式不正确\"));\n      }\n    };\n\n    //修改表单的验证规则对象\n    const editFormRules = reactive({\n      email: [{\n        required: true,\n        message: \"请输入邮箱号\",\n        trigger: \"blur\"\n      }, {\n        validator: checkEmail,\n        trigger: \"blur\"\n      }],\n      mobile: [{\n        required: true,\n        message: \"请输入手机号\",\n        trigger: \"blur\"\n      }, {\n        validator: checkMobile,\n        trigger: \"blur\"\n      }]\n    });\n    onMounted(async () => {\n      const res = await getUserList(queryInfo);\n      if (res.meta.status !== 200) {\n        return ElMessage.error('获取用户列表失败');\n      }\n      // console.log(res);\n      usersData.value = res.data.users;\n    });\n\n    // 监听 switch 开头状态的改变\n    const userStateChanged = async userInfo => {\n      const res = await changeUserState(userInfo);\n      console.log(res);\n      if (res.meta.status !== 200) {\n        userInfo.mg_state = !userInfo.mg_state;\n        return ElMessage.error('更新用户状态失败');\n      }\n      ElMessage({\n        message: '更新用户状态成功',\n        type: 'success'\n      });\n    };\n\n    //修改按钮\n    const showEditDialog = async id => {\n      //展示编辑用户的对话框\n      const res = await getEditUsers(id);\n      if (res.meta.status !== 200) {\n        return ElMessage.error(\"查询用户信息失败\");\n      }\n      editForm.value = res.data;\n      editDialogVisible.value = true;\n    };\n\n    //监听修改用户对话框的关闭事件\n    // const editDialogClose = () => {\n    //     editFromRef.value.resetFields();\n    // }\n\n    //点击按钮，提交修改的信息\n    const editUserInfo = () => {\n      editFromRef.value.validate(async valid => {\n        if (!valid) return;\n        console.log(editForm.value.id);\n        const res = await putEditUsers({\n          email: editForm.value.email,\n          mobile: editForm.mobile\n        });\n        console.log(res);\n        console.log('SB');\n      });\n    };\n    //删除按钮,根据id 删除对应用户信息\n    // const removeUserById = async (id) => {\n    //     //弹框询问用户是否删除数据\n    //     const confirmRes = await this.$confirm(\n    //         \"此操作将永久删除该用户, 是否继续?\",\n    //         \"提示\",\n    //         {\n    //             confirmButtonText: \"确定\",\n    //             cancelButtonText: \"取消\",\n    //             type: \"warning\",\n    //         }\n    //     ).catch((err) => err);\n    //     //如果用户 确认 删除,则返回值为 字符串 confirm\n    //     //如果用户 取消了删除,则返回值为 字符串 cancel\n    //     // console.log(confirmRes);\n    //     if (confirmRes !== \"confirm\") {\n    //         return this.$message.info(\"已取消删除\");\n    //     }\n    //     const { data: res } = await this.$http.delete(\"users/\" + id);\n\n    //     if (res.meta.status !== 200) {\n    //         return this.$message.error(\"删除用户失败\");\n    //     }\n    //     this.$message.success(\"删除用户成功\");\n    //     this.getUserList();\n    // }\n\n    const __returned__ = {\n      queryInfo,\n      usersData,\n      total,\n      editForm,\n      labelPosition,\n      editFromRef,\n      editDialogVisible,\n      get checkEmail() {\n        return checkEmail;\n      },\n      set checkEmail(v) {\n        checkEmail = v;\n      },\n      get checkMobile() {\n        return checkMobile;\n      },\n      set checkMobile(v) {\n        checkMobile = v;\n      },\n      editFormRules,\n      userStateChanged,\n      showEditDialog,\n      editUserInfo,\n      onMounted,\n      reactive,\n      ref,\n      get getUserList() {\n        return getUserList;\n      },\n      get changeUserState() {\n        return changeUserState;\n      },\n      get getEditUsers() {\n        return getEditUsers;\n      },\n      get putEditUsers() {\n        return putEditUsers;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get resetFields() {\n        return resetFields;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"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","names":["onMounted","reactive","ref","getUserList","changeUserState","getEditUsers","putEditUsers","ElMessage","resetFields","queryInfo","query","pagenum","pagesize","usersData","total","editForm","labelPosition","editFromRef","editDialogVisible","checkEmail","rule","value","cb","regEmail","test","Error","checkMobile","regMobile","editFormRules","email","required","message","trigger","validator","mobile","res","meta","status","error","data","users","userStateChanged","userInfo","console","log","mg_state","type","showEditDialog","id","editUserInfo","validate","valid"],"sources":["D:/前端基础/22科技月评-算法在线刷题平台/algorithmic_platform/src/components/userList/index.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <!-- 面包屑导航区域 -->\r\n        <el-breadcrumb separator=\">\">\r\n            <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\r\n            <el-breadcrumb-item>用户管理</el-breadcrumb-item>\r\n            <el-breadcrumb-item>用户列表</el-breadcrumb-item>\r\n        </el-breadcrumb>\r\n\r\n        <!-- 卡片视图区域 -->\r\n        <el-card class=\"box-card\">\r\n            <!-- 搜索区域 -->\r\n            <template #header>\r\n                <div class=\"card-header\">\r\n                    <el-row :gutter=\"25\">\r\n                        <el-col :span=\"9\">\r\n                            <el-input placeholder=\"请输入内容\" clearable>\r\n                            </el-input>\r\n                        </el-col>\r\n                        <el-col :span=\"3\">\r\n                            <el-button type=\"primary\">查询</el-button>\r\n                        </el-col>\r\n                    </el-row>\r\n                </div>\r\n            </template>\r\n\r\n            <!-- 用户列表区域 -->\r\n            <el-table :data=\"usersData\" border style=\"width: 100%\">\r\n                <el-table-column type=\"index\" label=\"id\" />\r\n                <el-table-column prop=\"username\" label=\"用户名\" />\r\n                <el-table-column prop=\"mobile\" label=\"电话\" />\r\n                <el-table-column prop=\"role_name\" label=\"角色\" />\r\n                <el-table-column prop=\"email\" label=\"邮箱\" />\r\n                <el-table-column label=\"状态\" prop=\"mg_state\">\r\n                    <!-- 用插槽包裹el-switch开关 -->\r\n                    <template v-slot=\"scope\">\r\n                        <span>封禁</span>\r\n                        <el-switch v-model=\"scope.row.mg_state\" @change=\"userStateChanged(scope.row)\" />\r\n                        <span>启用</span>\r\n                    </template>\r\n                </el-table-column>\r\n                <el-table-column label=\"操作\">\r\n                    <template v-slot=\"scope\">\r\n                        <!-- 修改按钮 -->\r\n                        <el-button type=\"primary\" class=\"iconfont icon-zuoti\" circle\r\n                            @click=\"showEditDialog(scope.row.id)\" size=\"large\">\r\n                        </el-button>\r\n                        <!-- 删除按钮 -->\r\n                        <el-button type=\"danger\" class=\"iconfont icon-shanchu2\" circle\r\n                            @click=\"removeUserById(scope.row.id)\" size=\"large\">\r\n                        </el-button>\r\n                    </template>\r\n                </el-table-column>\r\n            </el-table>\r\n            <!-- 分页区域 -->\r\n            <el-pagination v-model:current-page=\"currentPage4\" v-model:page-size=\"pageSize4\" :page-sizes=\"[3, 5, 10]\"\r\n                :small=\"small\" :disabled=\"disabled\" :background=\"background\"\r\n                layout=\"total, sizes, prev, pager, next, jumper\" :total=\"400\" @size-change=\"handleSizeChange\"\r\n                @current-change=\"handleCurrentChange\" />\r\n        </el-card>\r\n\r\n\r\n        <!-- 修改用户的对话框 -->\r\n        <el-dialog title=\"修改用户\" v-model=\"editDialogVisible\" width=\"40%\">\r\n            <el-form ref=\"editFromRef\" :label-position=\"labelPosition\" label-width=\"100px\" :model=\"editForm\"\r\n                :rules=\"editFormRules\" style=\"max-width: 460px\">\r\n                <el-form-item label=\"用户名\" prop=\"username\">\r\n                    <el-input v-model=\"editForm.username\" disabled />\r\n                </el-form-item>\r\n                <el-form-item label=\"电话\" prop=\"mobile\">\r\n                    <el-input v-model=\"editForm.mobile\" />\r\n                </el-form-item>\r\n                <el-form-item label=\"邮箱\" prop=\"email\">\r\n                    <el-input v-model=\"editForm.email\" />\r\n                </el-form-item>\r\n            </el-form>\r\n            <template #footer>\r\n                <span class=\"dialog-footer\">\r\n                    <el-button @click=\"editDialogVisible = false\">取消</el-button>\r\n                    <el-button type=\"primary\" @click=\"editUserInfo\">\r\n                        确定\r\n                    </el-button>\r\n                </span>\r\n            </template>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { onMounted, reactive, ref } from 'vue';\r\nimport { getUserList, changeUserState, getEditUsers, putEditUsers } from '@/axios/apis'\r\n\r\nimport { ElMessage, resetFields } from 'element-plus'\r\nconst queryInfo = reactive({\r\n    query: \"\",\r\n    pagenum: 1,\r\n    pagesize: 10,\r\n})\r\n\r\nconst usersData = ref([])\r\nconst total = ref(0)\r\n//查询到的用户信息对象\r\nconst editForm = ref({})\r\nconst labelPosition = ref('left')\r\nconst editFromRef = ref()\r\n//修改用户对话框的显示与隐藏\r\nconst editDialogVisible = ref(false)\r\n\r\n//验证邮箱的规则\r\nvar checkEmail = (rule, value, cb) => {\r\n    //验证邮箱的正则表达式\r\n    const regEmail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\\.[a-zA-Z0-9_-])+/;\r\n    if (regEmail.test(value)) {\r\n        return cb();\r\n    }\r\n    cb(new Error(\"请输入合法的邮箱!\"));\r\n};\r\n\r\n//验证电话的规则\r\nvar checkMobile = (rule, value, cb) => {\r\n    //验证电话的正则表达式\r\n    let regMobile =\r\n        /^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]{8}$/;\r\n    if (regMobile.test(value)) {\r\n        cb();\r\n    } else {\r\n        cb(new Error(\"手机号码格式不正确\"));\r\n    }\r\n};\r\n\r\n//修改表单的验证规则对象\r\nconst editFormRules = reactive({\r\n    email: [\r\n        { required: true, message: \"请输入邮箱号\", trigger: \"blur\" },\r\n        { validator: checkEmail, trigger: \"blur\" },\r\n    ],\r\n    mobile: [\r\n        { required: true, message: \"请输入手机号\", trigger: \"blur\" },\r\n        { validator: checkMobile, trigger: \"blur\" },\r\n    ],\r\n})\r\n\r\nonMounted(async () => {\r\n    const res = await getUserList(queryInfo)\r\n\r\n    if (res.meta.status !== 200) {\r\n        return ElMessage.error('获取用户列表失败')\r\n    }\r\n    // console.log(res);\r\n    usersData.value = res.data.users\r\n})\r\n\r\n// 监听 switch 开头状态的改变\r\nconst userStateChanged = async (userInfo) => {\r\n    const res = await changeUserState(userInfo)\r\n    console.log(res);\r\n    if (res.meta.status !== 200) {\r\n        userInfo.mg_state = !userInfo.mg_state\r\n        return ElMessage.error('更新用户状态失败')\r\n    }\r\n    ElMessage({\r\n        message: '更新用户状态成功',\r\n        type: 'success',\r\n    })\r\n}\r\n\r\n//修改按钮\r\nconst showEditDialog = async (id) => {\r\n    //展示编辑用户的对话框\r\n    const res = await getEditUsers(id);\r\n    if (res.meta.status !== 200) {\r\n        return ElMessage.error(\"查询用户信息失败\");\r\n    }\r\n    editForm.value = res.data;\r\n    editDialogVisible.value = true;\r\n}\r\n\r\n//监听修改用户对话框的关闭事件\r\n// const editDialogClose = () => {\r\n//     editFromRef.value.resetFields();\r\n// }\r\n\r\n\r\n//点击按钮，提交修改的信息\r\nconst editUserInfo = () => {\r\n    editFromRef.value.validate(async (valid) => {\r\n        if (!valid) return;\r\n        console.log(editForm.value.id);\r\n        const res = await putEditUsers({ email: editForm.value.email, mobile: editForm.mobile })\r\n        console.log(res);\r\n\r\n        console.log('SB');\r\n    })\r\n}\r\n//删除按钮,根据id 删除对应用户信息\r\n// const removeUserById = async (id) => {\r\n//     //弹框询问用户是否删除数据\r\n//     const confirmRes = await this.$confirm(\r\n//         \"此操作将永久删除该用户, 是否继续?\",\r\n//         \"提示\",\r\n//         {\r\n//             confirmButtonText: \"确定\",\r\n//             cancelButtonText: \"取消\",\r\n//             type: \"warning\",\r\n//         }\r\n//     ).catch((err) => err);\r\n//     //如果用户 确认 删除,则返回值为 字符串 confirm\r\n//     //如果用户 取消了删除,则返回值为 字符串 cancel\r\n//     // console.log(confirmRes);\r\n//     if (confirmRes !== \"confirm\") {\r\n//         return this.$message.info(\"已取消删除\");\r\n//     }\r\n//     const { data: res } = await this.$http.delete(\"users/\" + id);\r\n\r\n//     if (res.meta.status !== 200) {\r\n//         return this.$message.error(\"删除用户失败\");\r\n//     }\r\n//     this.$message.success(\"删除用户成功\");\r\n//     this.getUserList();\r\n// }\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}