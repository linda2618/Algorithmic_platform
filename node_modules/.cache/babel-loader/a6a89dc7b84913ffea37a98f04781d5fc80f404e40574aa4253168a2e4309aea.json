{"ast":null,"code":"import { reactive, ref } from 'vue';\nimport { loginApi } from '../../axios/apis';\nimport { useRouter } from 'vue-router';\n//按需引入 useStore()方法\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nconst router = useRouter();\n\n// Vue3中store类似于Vue2中this.$store\n// useStore()方法创建store对象，相当于src/store/index.js中的store实例对象\nconst store = useStore();\n\n// 修改showLoginView的值\nconst handleClick = () => {\n  //触发mutation, 用于同步修改state的信息\n  store.commit('changeStyle', !store.state.showLoginView);\n};\nconst form = reactive({\n  Email: \"\",\n  password: \"\",\n  isAgree: 0\n});\nconst registerForm = reactive({\n  rEmail: \"\",\n  rPassword: \"\",\n  confirmPassword: \"\",\n  identifyCode: \"\",\n  rAgree: 0\n});\n\n// 方法\n// 登录\nfunction login() {\n  console.log(form);\n}\n// 注册\nfunction register() {\n  console.log(\"注册\", registerForm);\n}\n// 获取验证码\nfunction getIdentifyCode() {\n  console.log(\"获取验证码\");\n}\n// 确认密码\n// function confirmFunc() {\n//   if (registerForm.confirmPassword !== registerForm.rPassword)\n//     alert(\"密码与确认密码不一致\");\n// }\nconst confirmFunc = () => {\n  if (registerForm.confirmPassword !== registerForm.rPassword) ElMessage.error(\"密码与确认密码不一致.\");\n};","map":{"version":3,"mappings":"AAqDA,SAASA,QAAQ,EAAEC,GAAE,QAAS,KAAI;AAClC,SAASC,QAAO,QAAS,kBAAiB;AAC1C,SAASC,SAAQ,QAAS,YAAY;AACtC;AACA,SAASC,QAAO,QAAS,MAAK;AAC9B,SAASC,SAAQ,QAAS,cAAa;AAGvC,MAAMC,MAAK,GAAIH,SAAS,EAAC;;AAEzB;AACA;AACA,MAAMI,KAAI,GAAIH,QAAQ,EAAC;;AAEvB;AACA,MAAMI,WAAU,GAAI,MAAM;EACtB;EACAD,KAAK,CAACE,MAAM,CAAC,aAAa,EAAE,CAACF,KAAK,CAACG,KAAK,CAACC,aAAa;AAC1D;AAEA,MAAMC,IAAG,GAAIZ,QAAQ,CAAC;EAClBa,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE,EAAE;EACZC,OAAO,EAAE;AACb,CAAC,CAAC;AACF,MAAMC,YAAW,GAAIhB,QAAQ,CAAC;EAC1BiB,MAAM,EAAE,EAAE;EACVC,SAAS,EAAE,EAAE;EACbC,eAAe,EAAE,EAAE;EACnBC,YAAY,EAAE,EAAE;EAChBC,MAAM,EAAE;AACZ,CAAC,CAAC;;AAEF;AACA;AACA,SAASC,KAAK,GAAG;EACbC,OAAO,CAACC,GAAG,CAACZ,IAAI,CAAC;AACrB;AACA;AACA,SAASa,QAAQ,GAAG;EAChBF,OAAO,CAACC,GAAG,CAAC,IAAI,EAAER,YAAY,CAAC;AACnC;AACA;AACA,SAASU,eAAe,GAAG;EACvBH,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,WAAU,GAAI,MAAM;EACtB,IAAIX,YAAY,CAACG,eAAc,KAAMH,YAAY,CAACE,SAAS,EACvDb,SAAS,CAACuB,KAAK,CAAC,aAAa,CAAC;AACtC","names":["reactive","ref","loginApi","useRouter","useStore","ElMessage","router","store","handleClick","commit","state","showLoginView","form","Email","password","isAgree","registerForm","rEmail","rPassword","confirmPassword","identifyCode","rAgree","login","console","log","register","getIdentifyCode","confirmFunc","error"],"sourceRoot":"","sources":["D:\\前端基础\\22科技月评-算法在线刷题平台\\algorithmic_platform\\src\\pages\\Login\\index.vue"],"sourcesContent":["<template>\r\n    <div id=\"box\" :class=\"{ type: store.state.showView }\">\r\n        <el-tabs type=\"card\" class=\"demo-tabs\">\r\n            <el-tab-pane label=\"登录\">\r\n                <el-form label-position=\"right\" label-width=\"60px\" style=\"max-width: 460px\" class=\"loginForm\">\r\n                    <el-form-item label=\"邮箱：\">\r\n                        <el-input v-model=\"Email\" />\r\n                    </el-form-item>\r\n                    <el-form-item label=\"密码：\">\r\n                        <el-input type=\"password\" v-model=\"password\" />\r\n                    </el-form-item>\r\n\r\n                    <el-row>\r\n                        <el-checkbox class=\"checkBox\" v-model=\"isAgree\" label=\"同意用户使用准则\" name=\"type\" />\r\n                    </el-row>\r\n                    <el-button v-if=\"isAgree\" type=\"primary\" class=\"loginBtn\" @click=\"login\">\r\n                        登录\r\n                    </el-button>\r\n                </el-form>\r\n            </el-tab-pane>\r\n\r\n            <el-tab-pane label=\"注册\">\r\n                <el-form label-position=\"right\" label-width=\"100px\" style=\"max-width: 460px\" class=\"loginForm\">\r\n                    <el-form-item label=\"邮箱：\">\r\n                        <el-input v-model=\"rEmail\" />\r\n                    </el-form-item>\r\n                    <el-form-item label=\"密码：\">\r\n                        <el-input type=\"password\" v-model=\"rPassword\" />\r\n                    </el-form-item>\r\n                    <el-form-item label=\"确认密码：\">\r\n                        <el-input type=\"password\" v-model=\"confirmPassword\" @blur=\"confirmFunc\" />\r\n                    </el-form-item>\r\n                    <el-form-item label=\"验证码：\">\r\n                        <el-row>\r\n                            <el-input type=\"password\" v-model=\"identifyCode\" class=\"inpWidth\" />\r\n                            <el-button type=\"primary\" @click=\"getIdentifyCode\" plain>\r\n                                获取验证码\r\n                            </el-button>\r\n                        </el-row>\r\n                    </el-form-item>\r\n\r\n                    <el-row>\r\n                        <el-checkbox class=\"checkBox\" v-model=\"rAgree\" label=\"同意用户使用准则\" name=\"type\" />\r\n                    </el-row>\r\n                    <el-button v-if=\"rAgree\" type=\"primary\" class=\"loginBtn\" @click=\"register\">\r\n                        注册\r\n                    </el-button>\r\n                </el-form>\r\n            </el-tab-pane>\r\n        </el-tabs>\r\n    </div>\r\n</template>\r\n<script>\r\nimport { reactive, ref } from 'vue'\r\nimport { loginApi } from '../../axios/apis'\r\nimport { useRouter } from 'vue-router';\r\n//按需引入 useStore()方法\r\nimport { useStore } from 'vuex'\r\nimport { ElMessage } from 'element-plus'\r\n\r\n\r\nconst router = useRouter()\r\n\r\n// Vue3中store类似于Vue2中this.$store\r\n// useStore()方法创建store对象，相当于src/store/index.js中的store实例对象\r\nconst store = useStore()\r\n\r\n// 修改showLoginView的值\r\nconst handleClick = () => {\r\n    //触发mutation, 用于同步修改state的信息\r\n    store.commit('changeStyle', !store.state.showLoginView)\r\n}\r\n\r\nconst form = reactive({\r\n    Email: \"\",\r\n    password: \"\",\r\n    isAgree: 0,\r\n});\r\nconst registerForm = reactive({\r\n    rEmail: \"\",\r\n    rPassword: \"\",\r\n    confirmPassword: \"\",\r\n    identifyCode: \"\",\r\n    rAgree: 0,\r\n});\r\n\r\n// 方法\r\n// 登录\r\nfunction login() {\r\n    console.log(form);\r\n}\r\n// 注册\r\nfunction register() {\r\n    console.log(\"注册\", registerForm);\r\n}\r\n// 获取验证码\r\nfunction getIdentifyCode() {\r\n    console.log(\"获取验证码\");\r\n}\r\n// 确认密码\r\n// function confirmFunc() {\r\n//   if (registerForm.confirmPassword !== registerForm.rPassword)\r\n//     alert(\"密码与确认密码不一致\");\r\n// }\r\nconst confirmFunc = () => {\r\n    if (registerForm.confirmPassword !== registerForm.rPassword)\r\n        ElMessage.error(\"密码与确认密码不一致.\");\r\n}\r\n</script>\r\n  \r\n<style scoped>\r\n.layout {\r\n    position: absolute;\r\n    left: calc(50% - 200px);\r\n    top: 20%;\r\n    width: 400px;\r\n}\r\n\r\n.loginBtn {\r\n    width: 100px;\r\n}\r\n\r\n.loginForm {\r\n    text-align: center;\r\n}\r\n\r\n.checkBox {\r\n    margin-left: 7px;\r\n}\r\n\r\n.inpWidth {\r\n    width: 165px;\r\n}\r\n</style>\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<!-- <template>\r\n    vuex 页面中直接使用渲染时与vue2中的使用方法相同 \r\n    <div id=\"box\" :class=\"{ type: store.state.showView }\">\r\n        <div :class=\"(login_box, { type: store.state.showLogin })\">\r\n            <div class=\"close_box\" @click=\"handleClick\">\r\n                <span>x</span>\r\n            </div>\r\n            <div class=\"title\">\r\n                <h1>每日算法</h1>\r\n            </div>\r\n            <el-form ref=\"loginFormRef\" :model=\"login_Form\" status-icon :rules=\"loginRules\" label-width=\"100px\"\r\n                class=\"demo-ruleForm\">\r\n                <el-form-item label=\"账号名\" prop=\"username\" style=\"width:400px\">\r\n                    <el-input v-model=\"login_Form.username\" type=\"input\" size=\"large\" />\r\n                </el-form-item>\r\n                <el-form-item label=\"密码\" prop=\"password\" style=\"width:400px\">\r\n                    <el-input v-model=\"login_Form.password\" type=\"password\" autocomplete=\"off\" size=\"large\" />\r\n                </el-form-item>\r\n                <el-form-item>\r\n                    <el-button class=\"login_button\" type=\"primary\" plain @click=\"login\" size=\"large\">登录</el-button>\r\n                </el-form-item>\r\n                <el-form-item>\r\n                </el-form-item>\r\n            </el-form>\r\n        </div>\r\n\r\n\r\n    </div>\r\n</template> -->\r\n\r\n<!-- <script setup>\r\nimport { reactive, ref } from 'vue'\r\nimport { loginApi } from '../../axios/apis'\r\nimport { useRouter } from 'vue-router';\r\n//按需引入 useStore()方法\r\nimport { useStore } from 'vuex'\r\nimport { ElMessage } from 'element-plus'\r\n\r\n\r\nconst router = useRouter()\r\n\r\n// Vue3中store类似于Vue2中this.$store\r\n// useStore()方法创建store对象，相当于src/store/index.js中的store实例对象\r\nconst store = useStore()\r\n\r\n// 修改showLoginView的值\r\nconst handleClick = () => {\r\n    //触发mutation, 用于同步修改state的信息\r\n    store.commit('changeStyle', !store.state.showView)\r\n    store.commit('changeLogin', !store.state.showLogin)\r\n    \r\n}\r\n\r\nconst login_Form = reactive({\r\n    username: '',\r\n    password: '',\r\n})\r\n\r\nconst loginRules = reactive({\r\n    username: [\r\n        { require: true, message: '请输入用户名', trigger: \"blur\" },\r\n        {\r\n            min: 2,\r\n            max: 8,\r\n            message: \"长度在 2到 8 个字符\",\r\n            trigger: \"blur\",\r\n        }],\r\n    password: [\r\n        { require: true, message: '请输入密码', trigger: \"blur\" },\r\n        {\r\n            min: 6,\r\n            max: 12,\r\n            message: \"长度在 6 到 12 个字符\",\r\n            trigger: \"blur\",\r\n        }]\r\n})\r\n\r\n//获取表单元素\r\nconst loginFormRef = ref()\r\n\r\n\r\n\r\n//登录按钮\r\nconst login = () => {\r\n    // console.log(loginFormRef);\r\n    // console.log(login_Form);\r\n    //预验证\r\n    loginFormRef.value.validate(async (valid) => {\r\n        // 根据预验证 判断是否发起请求\r\n        if (!valid) return;\r\n\r\n        const res = await loginApi(login_Form)\r\n        // console.log(res.data);\r\n        // console.log(res.meta);\r\n        if (res.meta.status !== 200) return ElMessage.error('登录失败！')\r\n\r\n        ElMessage({\r\n            message: '登录成功!',\r\n            type: 'success',\r\n        })\r\n        window.sessionStorage.setItem('token', res.data.token)\r\n        router.push('/home')\r\n    })\r\n}\r\n\r\n\r\n</script>\r\n\r\n<style lang=\"less\" scoped> -->\r\nbody {\r\n    position: relative;\r\n}\r\n\r\n#box {\r\n    z-index: 100;\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    background-color: rgba(221, 221, 221, 0.5);\r\n    // auto——效果和没有定义pointer-events属性相同，鼠标不会穿透当前层。\r\n    pointer-events: auto;\r\n\r\n    .login_box {\r\n        position: absolute;\r\n        left: 50%;\r\n        top: 50%;\r\n        transform: translate(-50%, -50%);\r\n        width: 480px;\r\n        height: 600px;\r\n        border-radius: 20px;\r\n        box-shadow: 10px 5px 5px rgb(225, 219, 219);\r\n        background: #fff;\r\n\r\n\r\n        .login_button {\r\n            width: 300px;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n.title {\r\n    margin: 40px 0px 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-left: 20px;\r\n    font-family: \"Microsoft YaHei\";\r\n\r\n}\r\n\r\n.type {\r\n    display: none;\r\n}\r\n\r\n.close_box {\r\n    width: 40px;\r\n    height: 40px;\r\n    position: absolute;\r\n    top: 15x;\r\n    right: -50px;\r\n    border-radius: 20px;\r\n    cursor: pointer;\r\n    background-color: rgb(227, 222, 222);\r\n    // 背景线性渐变\r\n    // background: linear-gradient(to bottom right, pink, yellow, violet, skyblue);\r\n\r\n\r\n    span {\r\n        font-size: 30px;\r\n        color: rgb(125, 127, 127);\r\n        margin-left: 13px;\r\n        line-height: 35px;\r\n    }\r\n}\r\n<!-- </style> -->"]},"metadata":{},"sourceType":"module","externalDependencies":[]}