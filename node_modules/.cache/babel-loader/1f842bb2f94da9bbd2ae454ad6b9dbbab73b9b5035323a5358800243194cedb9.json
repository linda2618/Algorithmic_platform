{"ast":null,"code":"import { onMounted, reactive, ref } from \"vue\";\nimport { getUserList, changeUserState, getEditUsers,\n// putEditUsers,\ndeleteOneUser } from \"@/axios/apis\";\nimport instance from \"@/axios/index\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\nexport default {\n  __name: 'index',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const queryInfo = reactive({\n      page: 1\n    });\n    const usersData = ref([]);\n    const total = ref(0);\n    //查询到的用户信息对象\n    const editForm = ref({});\n    const labelPosition = ref(\"left\");\n    const editFromRef = ref();\n    //修改用户对话框的显示与隐藏\n    const editDialogVisible = ref(false);\n\n    //验证邮箱的规则\n    var checkEmail = (rule, value, cb) => {\n      //验证邮箱的正则表达式\n      const regEmail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\\.[a-zA-Z0-9_-])+/;\n      if (regEmail.test(value)) {\n        return cb();\n      }\n      cb(new Error(\"请输入合法的邮箱!\"));\n    };\n\n    //验证电话的规则\n    var checkMobile = (rule, value, cb) => {\n      //验证电话的正则表达式\n      let regMobile = /^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]{8}$/;\n      if (regMobile.test(value)) {\n        cb();\n      } else {\n        cb(new Error(\"手机号码格式不正确\"));\n      }\n    };\n\n    //修改表单的验证规则对象\n    const editFormRules = reactive({\n      email: [{\n        required: true,\n        message: \"请输入邮箱号\",\n        trigger: \"blur\"\n      }, {\n        validator: checkEmail,\n        trigger: \"blur\"\n      }],\n      mobile: [{\n        required: true,\n        message: \"请输入手机号\",\n        trigger: \"blur\"\n      }, {\n        validator: checkMobile,\n        trigger: \"blur\"\n      }]\n    });\n    onMounted(() => {\n      getUserListView();\n    });\n    const getUserListView = async () => {\n      const res = await getUserList(queryInfo);\n      // console.log(res);\n      if (res.status !== 200) {\n        return ElMessage.error(\"获取用户列表失败\");\n      }\n      usersData.value = res.data;\n      total.value = res.total;\n    };\n\n    //格式化时间\n    const userTimeFormate = totalTime => {\n      const date = new Date(totalTime);\n      const yyyy = date.getFullYear();\n      const MM = date.getMonth() + 1 < 10 ? '0' + date.getMonth() + 1 : date.getMonth() + 1;\n      const dd = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();\n      const hh = date.getHours() + 8 < 10 ? '0' + date.getHours() : date.getHours();\n      const mm = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();\n      const ss = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds();\n      return yyyy + '-' + MM + '-' + dd + ' ' + hh + ':' + mm + ':' + ss;\n    };\n\n    // 监听页码值 改变的事件\n    const handleCurrentChange = newPage => {\n      queryInfo.page = newPage;\n      getUserListView();\n    };\n\n    // 监听 switch 状态的改变\n    const userStateChanged = async id => {\n      const confirmRes = await ElMessageBox.confirm(\"此操作将禁用该用户, 是否继续?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).catch(err => err);\n      if (confirmRes !== \"confirm\") {\n        return ElMessage.error(\"已取消删除\");\n      }\n      const res = await changeUserState(id);\n      console.log(res);\n      if (res.status !== 200) {\n        return ElMessage.error(\"禁用用户失败！\");\n      }\n      ElMessage({\n        message: \"禁用用户成功！\",\n        type: \"success\"\n      });\n    };\n\n    //修改按钮\n    const showEditDialog = async id => {\n      //展示编辑用户的对话框\n      const res = await getEditUsers(id);\n      if (res.meta.status !== 200) {\n        return ElMessage.error(\"查询用户信息失败\");\n      }\n      editForm.value = res.data;\n      editDialogVisible.value = true;\n    };\n\n    //监听修改用户对话框的关闭事件\n    // const editDialogClose = () => {\n    //     editFromRef.value.resetFields();\n    // }\n\n    //点击按钮，提交修改的信息\n    const editUserInfo = () => {\n      editFromRef.value.validate(async valid => {\n        if (!valid) return;\n        // console.log(editForm.value.id); //500\n        // console.log(editForm.value);\n        // **********不太理解的地方\n        // const res = await putEditUsers(editForm)\n        const res = await instance.put(\"users/\" + editForm.value.id, {\n          email: editForm.value.email,\n          mobile: editForm.value.mobile\n        });\n        // console.log(res);\n        if (res.meta.status !== 200) {\n          return ElMessage.error(\"修改用户信息失败\");\n        }\n        editDialogVisible.value = false;\n        //重新获取用户列表\n        getUserListView();\n        ElMessage({\n          message: \"修改用户成功!\",\n          type: \"success\"\n        });\n      });\n    };\n\n    //删除按钮,根据id 删除对应用户信息\n    const removeUserById = async id => {\n      //弹框询问用户是否删除数据\n      const confirmRes = await ElMessageBox.confirm(\"此操作将永久删除该用户, 是否继续?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).catch(err => err);\n\n      //如果用户 确认 删除,则返回值为 字符串 confirm\n      //如果用户 取消了删除,则返回值为 字符串 cancel\n      // console.log(confirmRes);\n      if (confirmRes !== \"confirm\") {\n        return ElMessage.error(\"已取消删除\");\n      }\n      const res = await deleteOneUser(id);\n      // console.log(res);\n      if (res.meta.status !== 200) {\n        return ElMessage.error(\"删除用户失败\");\n      }\n      ElMessage({\n        type: \"success\",\n        message: \"删除用户成功\"\n      });\n      getUserListView();\n    };\n    const __returned__ = {\n      queryInfo,\n      usersData,\n      total,\n      editForm,\n      labelPosition,\n      editFromRef,\n      editDialogVisible,\n      get checkEmail() {\n        return checkEmail;\n      },\n      set checkEmail(v) {\n        checkEmail = v;\n      },\n      get checkMobile() {\n        return checkMobile;\n      },\n      set checkMobile(v) {\n        checkMobile = v;\n      },\n      editFormRules,\n      getUserListView,\n      userTimeFormate,\n      handleCurrentChange,\n      userStateChanged,\n      showEditDialog,\n      editUserInfo,\n      removeUserById,\n      onMounted,\n      reactive,\n      ref,\n      get getUserList() {\n        return getUserList;\n      },\n      get changeUserState() {\n        return changeUserState;\n      },\n      get getEditUsers() {\n        return getEditUsers;\n      },\n      get deleteOneUser() {\n        return deleteOneUser;\n      },\n      get instance() {\n        return instance;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"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","names":["onMounted","reactive","ref","getUserList","changeUserState","getEditUsers","deleteOneUser","instance","ElMessage","ElMessageBox","queryInfo","page","usersData","total","editForm","labelPosition","editFromRef","editDialogVisible","checkEmail","rule","value","cb","regEmail","test","Error","checkMobile","regMobile","editFormRules","email","required","message","trigger","validator","mobile","getUserListView","res","status","error","data","userTimeFormate","totalTime","date","Date","yyyy","getFullYear","MM","getMonth","dd","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","handleCurrentChange","newPage","userStateChanged","id","confirmRes","confirm","confirmButtonText","cancelButtonText","type","catch","err","console","log","showEditDialog","meta","editUserInfo","validate","valid","put","removeUserById"],"sources":["D:/前端基础/22科技月评-算法在线刷题平台/algorithmic_platform/src/components/userList/index.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <!-- 面包屑导航区域 -->\r\n        <el-breadcrumb separator=\">\">\r\n            <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\r\n            <el-breadcrumb-item>用户管理</el-breadcrumb-item>\r\n            <el-breadcrumb-item>用户列表</el-breadcrumb-item>\r\n        </el-breadcrumb>\r\n\r\n        <!-- 卡片视图区域 -->\r\n        <el-card class=\"box-card\">\r\n            <!-- 搜索区域 -->\r\n            <template #header>\r\n                <div class=\"card-header\">\r\n                    <el-row :gutter=\"25\">\r\n                        <el-col :span=\"9\">\r\n                            <el-input placeholder=\"请输入内容\" v-model=\"queryInfo.query\" clearable @clear=\"getUserListView\">\r\n                            </el-input>\r\n                        </el-col>\r\n                        <el-col :span=\"3\">\r\n                            <el-button type=\"primary\" @click=\"getUserListView\">查询</el-button>\r\n                        </el-col>\r\n                    </el-row>\r\n                </div>\r\n            </template>\r\n\r\n            <!-- 用户列表区域 -->\r\n            <el-table :data=\"usersData\" border style=\"width: 100%\">\r\n                <el-table-column type=\"index\" label=\"id\" />\r\n                <el-table-column prop=\"username\" label=\"用户名\" />\r\n                <el-table-column prop=\"mobile\" label=\"电话\" />\r\n                <el-table-column prop=\"role\" label=\"角色\" />\r\n                <el-table-column prop=\"email\" label=\"邮箱\" />\r\n                <el-table-column prop=\"createdTime\" label=\"创建时间\">\r\n                    <template v-slot=\"scope\">\r\n                        {{ userTimeFormate(scope.row.createdTime) }}\r\n                    </template>\r\n                </el-table-column>\r\n                <el-table-column label=\"状态\" prop=\"state\">\r\n                    <!-- 用插槽包裹el-switch开关 -->\r\n                    <template v-slot=\"scope\">\r\n                        <span>封禁</span>\r\n                        <el-switch v-model=\"scope.state\" @change=\"userStateChanged(scope.row._id)\" />\r\n                        <span>启用</span>\r\n                    </template>\r\n                </el-table-column>\r\n                <el-table-column label=\"操作\">\r\n                    <template v-slot=\"scope\">\r\n                        <!-- 修改按钮 -->\r\n                        <el-button type=\"primary\" class=\"iconfont icon-zuoti\" circle\r\n                            @click=\"showEditDialog(scope.row.id)\" size=\"large\">\r\n                        </el-button>\r\n                        <!-- 删除按钮 -->\r\n                        <el-button type=\"danger\" class=\"iconfont icon-shanchu2\" circle\r\n                            @click=\"removeUserById(scope.row.id)\" size=\"large\">\r\n                        </el-button>\r\n                    </template>\r\n                </el-table-column>\r\n            </el-table>\r\n            <!-- 分页区域 -->\r\n            <el-pagination v-model:current-page=\"queryInfo.page\" :page-sizes=\"[3, 5, 10]\"\r\n                layout=\"total, sizes, prev, pager, next, jumper\" :total=\"total\" @current-change=\"handleCurrentChange\" />\r\n        </el-card>\r\n\r\n        <!-- 修改用户的对话框 -->\r\n        <el-dialog title=\"修改用户\" v-model=\"editDialogVisible\" width=\"40%\">\r\n            <el-form ref=\"editFromRef\" :label-position=\"labelPosition\" label-width=\"100px\" :model=\"editForm\"\r\n                :rules=\"editFormRules\" style=\"max-width: 460px\">\r\n                <el-form-item label=\"用户名\" prop=\"username\">\r\n                    <el-input v-model=\"editForm.username\" disabled />\r\n                </el-form-item>\r\n                <el-form-item label=\"电话\" prop=\"mobile\">\r\n                    <el-input v-model=\"editForm.mobile\" />\r\n                </el-form-item>\r\n                <el-form-item label=\"邮箱\" prop=\"email\">\r\n                    <el-input v-model=\"editForm.email\" />\r\n                </el-form-item>\r\n            </el-form>\r\n            <template #footer>\r\n                <span class=\"dialog-footer\">\r\n                    <el-button @click=\"editDialogVisible = false\">取消</el-button>\r\n                    <el-button type=\"primary\" @click=\"editUserInfo\"> 确定 </el-button>\r\n                </span>\r\n            </template>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { onMounted, reactive, ref } from \"vue\";\r\nimport {\r\n    getUserList,\r\n    changeUserState,\r\n    getEditUsers,\r\n    // putEditUsers,\r\n    deleteOneUser,\r\n} from \"@/axios/apis\";\r\nimport instance from \"@/axios/index\";\r\nimport { ElMessage, ElMessageBox } from \"element-plus\";\r\nconst queryInfo = reactive({\r\n    page: 1,\r\n});\r\n\r\nconst usersData = ref([]);\r\nconst total = ref(0);\r\n//查询到的用户信息对象\r\nconst editForm = ref({});\r\nconst labelPosition = ref(\"left\");\r\nconst editFromRef = ref();\r\n//修改用户对话框的显示与隐藏\r\nconst editDialogVisible = ref(false);\r\n\r\n//验证邮箱的规则\r\nvar checkEmail = (rule, value, cb) => {\r\n    //验证邮箱的正则表达式\r\n    const regEmail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\\.[a-zA-Z0-9_-])+/;\r\n    if (regEmail.test(value)) {\r\n        return cb();\r\n    }\r\n    cb(new Error(\"请输入合法的邮箱!\"));\r\n};\r\n\r\n//验证电话的规则\r\nvar checkMobile = (rule, value, cb) => {\r\n    //验证电话的正则表达式\r\n    let regMobile =\r\n        /^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]{8}$/;\r\n    if (regMobile.test(value)) {\r\n        cb();\r\n    } else {\r\n        cb(new Error(\"手机号码格式不正确\"));\r\n    }\r\n};\r\n\r\n//修改表单的验证规则对象\r\nconst editFormRules = reactive({\r\n    email: [\r\n        { required: true, message: \"请输入邮箱号\", trigger: \"blur\" },\r\n        { validator: checkEmail, trigger: \"blur\" },\r\n    ],\r\n    mobile: [\r\n        { required: true, message: \"请输入手机号\", trigger: \"blur\" },\r\n        { validator: checkMobile, trigger: \"blur\" },\r\n    ],\r\n});\r\n\r\nonMounted(() => {\r\n    getUserListView();\r\n});\r\n\r\nconst getUserListView = async () => {\r\n    const res = await getUserList(queryInfo);\r\n    // console.log(res);\r\n    if (res.status !== 200) {\r\n        return ElMessage.error(\"获取用户列表失败\");\r\n    }\r\n    usersData.value = res.data;\r\n    total.value = res.total;\r\n};\r\n\r\n//格式化时间\r\nconst userTimeFormate = (totalTime) => {\r\n    const date = new Date(totalTime)\r\n    const yyyy = date.getFullYear()\r\n    const MM = date.getMonth() + 1 < 10 ? '0' + date.getMonth() + 1 : date.getMonth() + 1\r\n    const dd = date.getDate() < 10 ? '0' + date.getDate() : date.getDate()\r\n    const hh = date.getHours() + 8 < 10 ? '0' + date.getHours() : date.getHours()\r\n    const mm = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()\r\n    const ss = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds()\r\n    return yyyy + '-' + MM + '-' + dd + ' ' + hh + ':' + mm + ':' + ss\r\n}\r\n\r\n// 监听页码值 改变的事件\r\nconst handleCurrentChange = (newPage) => {\r\n    queryInfo.page = newPage;\r\n    getUserListView();\r\n};\r\n\r\n// 监听 switch 状态的改变\r\nconst userStateChanged = async (id) => {\r\n    const confirmRes = await ElMessageBox.confirm(\"此操作将禁用该用户, 是否继续?\", \"提示\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\",\r\n    }).catch((err) => err)\r\n\r\n    if (confirmRes !== \"confirm\") {\r\n        return ElMessage.error(\"已取消删除\");\r\n    }\r\n    const res = await changeUserState(id);\r\n    console.log(res);\r\n\r\n    if (res.status !== 200) {\r\n        return ElMessage.error(\"禁用用户失败！\");\r\n    }\r\n    ElMessage({\r\n        message: \"禁用用户成功！\",\r\n        type: \"success\",\r\n    });\r\n};\r\n\r\n//修改按钮\r\nconst showEditDialog = async (id) => {\r\n    //展示编辑用户的对话框\r\n    const res = await getEditUsers(id);\r\n    if (res.meta.status !== 200) {\r\n        return ElMessage.error(\"查询用户信息失败\");\r\n    }\r\n    editForm.value = res.data;\r\n    editDialogVisible.value = true;\r\n};\r\n\r\n//监听修改用户对话框的关闭事件\r\n// const editDialogClose = () => {\r\n//     editFromRef.value.resetFields();\r\n// }\r\n\r\n//点击按钮，提交修改的信息\r\nconst editUserInfo = () => {\r\n    editFromRef.value.validate(async (valid) => {\r\n        if (!valid) return;\r\n        // console.log(editForm.value.id); //500\r\n        // console.log(editForm.value);\r\n        // **********不太理解的地方\r\n        // const res = await putEditUsers(editForm)\r\n        const res = await instance.put(\"users/\" + editForm.value.id, {\r\n            email: editForm.value.email,\r\n            mobile: editForm.value.mobile,\r\n        });\r\n        // console.log(res);\r\n        if (res.meta.status !== 200) {\r\n            return ElMessage.error(\"修改用户信息失败\");\r\n        }\r\n        editDialogVisible.value = false;\r\n        //重新获取用户列表\r\n        getUserListView();\r\n        ElMessage({\r\n            message: \"修改用户成功!\",\r\n            type: \"success\",\r\n        });\r\n    });\r\n};\r\n\r\n//删除按钮,根据id 删除对应用户信息\r\nconst removeUserById = async (id) => {\r\n    //弹框询问用户是否删除数据\r\n    const confirmRes = await ElMessageBox.confirm(\"此操作将永久删除该用户, 是否继续?\", \"提示\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\",\r\n    }).catch((err) => err)\r\n\r\n    //如果用户 确认 删除,则返回值为 字符串 confirm\r\n    //如果用户 取消了删除,则返回值为 字符串 cancel\r\n    // console.log(confirmRes);\r\n    if (confirmRes !== \"confirm\") {\r\n        return ElMessage.error(\"已取消删除\");\r\n    }\r\n    const res = await deleteOneUser(id)\r\n    // console.log(res);\r\n    if (res.meta.status !== 200) {\r\n        return ElMessage.error(\"删除用户失败\");\r\n    }\r\n    ElMessage({\r\n        type: \"success\",\r\n        message: \"删除用户成功\",\r\n    });\r\n    getUserListView();\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}