{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { onMounted, reactive, ref } from 'vue';\nimport { loginApi, regApi, getUserList } from '../../axios/apis';\nimport { useRouter } from 'vue-router';\n//按需引入 useStore()方法\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nexport default {\n  __name: 'index',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const router = useRouter();\n\n    // Vue3中store类似于Vue2中this.$store\n    // useStore()方法创建store对象，相当于src/store/index.js中的store实例对象\n    const store = useStore();\n\n    // 修改showLoginView的值\n    const handleClick = () => {\n      //触发mutation, 用于同步修改state的信息\n      store.commit('changeStyle', !store.state.showLoginView);\n    };\n    const users = ref([]);\n    const login_Form = reactive({\n      username: '',\n      password: ''\n    });\n    const reg_Form = reactive({\n      username: '',\n      password: '',\n      rePassword: ''\n    });\n    const queryInfo = reactive({\n      page: 1\n    });\n    const loginRules = reactive({\n      username: [{\n        required: true,\n        message: '请输入用户名',\n        trigger: \"blur\"\n      }, {\n        min: 2,\n        max: 8,\n        message: \"长度在 2到 8 个字符\",\n        trigger: \"blur\"\n      }],\n      password: [{\n        required: true,\n        message: '请输入密码',\n        trigger: \"blur\"\n      }, {\n        min: 6,\n        max: 12,\n        message: \"长度在 6 到 12 个字符\",\n        trigger: \"blur\"\n      }]\n    });\n\n    // var checkRePassword = \n    const regRules = reactive({\n      username: [{\n        required: true,\n        message: '请输入用户名',\n        trigger: \"blur\"\n      }, {\n        min: 2,\n        max: 8,\n        message: \"长度在 2到 8 个字符\",\n        trigger: \"blur\"\n      }],\n      password: [{\n        required: true,\n        message: '请输入密码',\n        trigger: \"blur\"\n      }, {\n        min: 6,\n        max: 12,\n        message: \"长度在 6 到 12 个字符\",\n        trigger: \"blur\"\n      }],\n      rePassword: [{\n        required: true,\n        message: '再次输入密码',\n        trigger: \"blur\"\n      }]\n    });\n    const size = ref('large');\n    //获取表单元素\n    const loginFormRef = ref();\n    const regFormRef = ref();\n    const isAgree = ref(false);\n    const rAgree = ref(false);\n    onMounted(() => {\n      getUsersLists();\n    });\n\n    //获取用户列表\n    const getUsersLists = async () => {\n      const res = await getUserList(queryInfo);\n      users.value = res.data;\n      console.log(users.value);\n    };\n\n    //登录按钮\n    const login = () => {\n      //预验证\n      loginFormRef.value.validate(async valid => {\n        // 根据预验证 判断是否发起请求\n        if (!valid) return;\n        const res = await loginApi(login_Form);\n        console.log(res);\n        //判断用户存不存在\n        if (res.status === 400) return ElMessage.error('用户不存在，请注册！');\n        //判断用户是否登录成功\n        if (res.status === 200) {\n          ElMessage({\n            message: '登录成功!',\n            type: 'success'\n          });\n          window.sessionStorage.setItem('token', res.data.token);\n          router.push('/home');\n        } else {\n          return ElMessage.error('登录失败！');\n        }\n      });\n    };\n    //注册按钮\n    const register = () => {\n      regFormRef.value.validate(async valid => {\n        if (!valid) return;\n        //判断用户名是否已存在\n        const exit = users.value.some(v => {\n          return v.username === reg_Form.username;\n        });\n        if (exit) {\n          return ElMessage.error('用户名已存在！');\n        }\n        //确认密码\n        if (reg_Form.rePassword !== reg_Form.password) return ElMessage.error('确认密码错误！');\n        const res = await regApi(reg_Form);\n        if (res.status === 200) {\n          ElMessage({\n            message: '注册成功!',\n            type: 'success'\n          });\n        }\n      });\n    };\n    const __returned__ = {\n      router,\n      store,\n      handleClick,\n      users,\n      login_Form,\n      reg_Form,\n      queryInfo,\n      loginRules,\n      regRules,\n      size,\n      loginFormRef,\n      regFormRef,\n      isAgree,\n      rAgree,\n      getUsersLists,\n      login,\n      register,\n      onMounted,\n      reactive,\n      ref,\n      get loginApi() {\n        return loginApi;\n      },\n      get regApi() {\n        return regApi;\n      },\n      get getUserList() {\n        return getUserList;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get useStore() {\n        return useStore;\n      },\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"mappings":"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","names":["onMounted","reactive","ref","loginApi","regApi","getUserList","useRouter","useStore","ElMessage","router","store","handleClick","commit","state","showLoginView","users","login_Form","username","password","reg_Form","rePassword","queryInfo","page","loginRules","required","message","trigger","min","max","regRules","size","loginFormRef","regFormRef","isAgree","rAgree","getUsersLists","res","value","data","console","log","login","validate","valid","status","error","type","window","sessionStorage","setItem","token","push","register","exit","some","v"],"sources":["D:/前端基础/22科技月评-算法在线刷题平台/algorithmic_platform/src/pages/Login/index.vue"],"sourcesContent":["<!-- <style scoped >\r\n#box {\r\n    z-index: 100;\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    background-color: rgba(221, 221, 221, 0.5);\r\n     /* auto——效果和没有定义pointer-events属性相同，鼠标不会穿透当前层。 */\r\n    pointer-events: auto;\r\n}\r\n\r\n.loginBtn {\r\n    width: 100px;\r\n}\r\n\r\n.loginForm {\r\n    text-align: center;\r\n}\r\n\r\n.checkBox {\r\n    margin-left: 7px;\r\n}\r\n\r\n.inpWidth {\r\n    width: 165px;\r\n}\r\n</style> -->\r\n\r\n\r\n\r\n<template>\r\n    <!-- vuex 页面中直接使用渲染时与vue2中的使用方法相同  -->\r\n    <div id=\"box\" :class=\"{ type: store.state.showView }\">\r\n        <div class=\"login_box\">\r\n            <div class=\"close_box\" @click=\"handleClick\">\r\n                <span>x</span>\r\n            </div>\r\n            <div class=\"title\">\r\n                <h1>每日算法</h1>\r\n            </div>\r\n            <el-tabs type=\"card\" class=\"demo-tabs\">\r\n                <el-tab-pane label=\"登录\" class=\"label_box\">\r\n                    <el-form ref=\"loginFormRef\" :model=\"login_Form\" status-icon :rules=\"loginRules\" label-width=\"100px\"\r\n                        class=\"demo-ruleForm\">\r\n                        <el-form-item label=\"账号名\" prop=\"username\" style=\"width:400px\">\r\n                            <el-input v-model=\"login_Form.username\" type=\"input\" :size=\"size\" clearable />\r\n                        </el-form-item>\r\n                        <el-form-item label=\"输入密码\" prop=\"password\" style=\"width:400px\">\r\n                            <el-input v-model=\"login_Form.password\" type=\"password\" :size=\"size\" clearable />\r\n                        </el-form-item>\r\n                        <el-form-item style=\"width:400px\">\r\n                            <el-checkbox class=\"checkBox\" v-model=\"isAgree\" label=\"同意用户使用准则\" name=\"type\" />\r\n                        </el-form-item>\r\n                        <el-form-item style=\"width:400px\">\r\n                            <el-button v-if=\"isAgree\" class=\"login_button\" type=\"primary\" plain :size=\"size\"\r\n                                @click=\"login\">\r\n                                登录\r\n                            </el-button>\r\n                        </el-form-item>\r\n                    </el-form>\r\n                </el-tab-pane>\r\n\r\n                <el-tab-pane label=\"注册\">\r\n                    <el-form ref=\"regFormRef\" :model=\"reg_Form\" status-icon :rules=\"regRules\" label-width=\"100px\"\r\n                        class=\"demo-ruleForm\">\r\n                        <el-form-item label=\"账号名\" prop=\"username\" style=\"width:400px\">\r\n                            <el-input v-model=\"reg_Form.username\" type=\"input\" :size=\"size\" clearable />\r\n                        </el-form-item>\r\n                        <el-form-item label=\"输入密码\" prop=\"password\" style=\"width:400px\">\r\n                            <el-input v-model=\"reg_Form.password\" type=\"password\" :size=\"size\" clearable />\r\n                        </el-form-item>\r\n                        <el-form-item label=\"确认密码\" prop=\"rePassword\" style=\"width:400px\">\r\n                            <el-input v-model=\"reg_Form.rePassword\" type=\"password\" :size=\"size\" clearable />\r\n                        </el-form-item>\r\n                        <el-form-item style=\"width:400px\">\r\n                            <el-checkbox class=\"checkBox\" v-model=\"rAgree\" label=\"同意用户使用准则\" name=\"type\" />\r\n                        </el-form-item>\r\n                        <el-form-item style=\"width:400px\">\r\n                            <el-button v-if=\"rAgree\" type=\"primary\" class=\"login_button\" @click=\"register\">\r\n                                注册\r\n                            </el-button>\r\n                        </el-form-item>\r\n                    </el-form>\r\n                </el-tab-pane>\r\n            </el-tabs>\r\n        </div>\r\n\r\n    </div>\r\n</template> \r\n\r\n<script setup>\r\nimport { onMounted, reactive, ref } from 'vue'\r\nimport { loginApi, regApi, getUserList } from '../../axios/apis'\r\nimport { useRouter } from 'vue-router';\r\n//按需引入 useStore()方法\r\nimport { useStore } from 'vuex'\r\nimport { ElMessage } from 'element-plus'\r\n\r\n\r\nconst router = useRouter()\r\n\r\n// Vue3中store类似于Vue2中this.$store\r\n// useStore()方法创建store对象，相当于src/store/index.js中的store实例对象\r\nconst store = useStore()\r\n\r\n// 修改showLoginView的值\r\nconst handleClick = () => {\r\n    //触发mutation, 用于同步修改state的信息\r\n    store.commit('changeStyle', !store.state.showLoginView)\r\n}\r\nconst users = ref([])\r\nconst login_Form = reactive({\r\n    username: '',\r\n    password: '',\r\n})\r\nconst reg_Form = reactive({\r\n    username: '',\r\n    password: '',\r\n    rePassword: ''\r\n})\r\nconst queryInfo = reactive({\r\n    page: 1\r\n})\r\n\r\nconst loginRules = reactive({\r\n    username: [\r\n        { required: true, message: '请输入用户名', trigger: \"blur\" },\r\n        {\r\n            min: 2,\r\n            max: 8,\r\n            message: \"长度在 2到 8 个字符\",\r\n            trigger: \"blur\",\r\n        }],\r\n    password: [\r\n        { required: true, message: '请输入密码', trigger: \"blur\" },\r\n        {\r\n            min: 6,\r\n            max: 12,\r\n            message: \"长度在 6 到 12 个字符\",\r\n            trigger: \"blur\",\r\n        }],\r\n})\r\n\r\n// var checkRePassword = \r\nconst regRules = reactive({\r\n    username: [\r\n        { required: true, message: '请输入用户名', trigger: \"blur\" },\r\n        {\r\n            min: 2,\r\n            max: 8,\r\n            message: \"长度在 2到 8 个字符\",\r\n            trigger: \"blur\",\r\n        }],\r\n    password: [\r\n        { required: true, message: '请输入密码', trigger: \"blur\" },\r\n        {\r\n            min: 6,\r\n            max: 12,\r\n            message: \"长度在 6 到 12 个字符\",\r\n            trigger: \"blur\",\r\n        }],\r\n    rePassword: [\r\n        { required: true, message: '再次输入密码', trigger: \"blur\" },\r\n    ]\r\n})\r\n\r\nconst size = ref('large')\r\n//获取表单元素\r\nconst loginFormRef = ref()\r\nconst regFormRef = ref()\r\nconst isAgree = ref(false)\r\nconst rAgree = ref(false)\r\n\r\nonMounted(() => {\r\n    getUsersLists()\r\n})\r\n\r\n//获取用户列表\r\nconst getUsersLists = async () => {\r\n    const res = await getUserList(queryInfo)\r\n    users.value = res.data\r\n    console.log(users.value);\r\n}\r\n\r\n//登录按钮\r\nconst login = () => {\r\n    //预验证\r\n    loginFormRef.value.validate(async (valid) => {\r\n        // 根据预验证 判断是否发起请求\r\n        if (!valid) return;\r\n        const res = await loginApi(login_Form)\r\n        console.log(res);\r\n        //判断用户存不存在\r\n        if (res.status === 400) return ElMessage.error('用户不存在，请注册！')\r\n        //判断用户是否登录成功\r\n        if (res.status === 200) {\r\n            ElMessage({\r\n                message: '登录成功!',\r\n                type: 'success',\r\n            })\r\n            window.sessionStorage.setItem('token', res.data.token)\r\n            router.push('/home')\r\n\r\n        } else {\r\n            return ElMessage.error('登录失败！')\r\n        }\r\n    })\r\n}\r\n//注册按钮\r\nconst register = () => {\r\n    regFormRef.value.validate(async (valid) => {\r\n        if (!valid) return\r\n        //判断用户名是否已存在\r\n        const exit = users.value.some(v => { return v.username === reg_Form.username })\r\n        if (exit) {\r\n            return ElMessage.error('用户名已存在！')\r\n        }\r\n        //确认密码\r\n        if (reg_Form.rePassword !== reg_Form.password) return ElMessage.error('确认密码错误！')\r\n\r\n        const res = await regApi(reg_Form)\r\n\r\n        if (res.status === 200) {\r\n            ElMessage({\r\n                message: '注册成功!',\r\n                type: 'success',\r\n            })\r\n        }\r\n\r\n    })\r\n\r\n}\r\n\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\nbody {\r\n    position: relative;\r\n}\r\n\r\n.type {\r\n    display: none;\r\n}\r\n\r\n#box {\r\n    z-index: 100;\r\n    position: fixed;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    background-color: rgba(221, 221, 221, 0.5);\r\n    // auto——效果和没有定义pointer-events属性相同，鼠标不会穿透当前层。\r\n    pointer-events: auto;\r\n\r\n    .login_box {\r\n        position: absolute;\r\n        left: 50%;\r\n        top: 50%;\r\n        transform: translate(-50%, -50%);\r\n        width: 480px;\r\n        height: 600px;\r\n        border-radius: 20px;\r\n        box-shadow: 10px 5px 5px rgb(225, 219, 219);\r\n        background: #fff;\r\n        border: 1px solid;\r\n\r\n\r\n        .login_button {\r\n            width: 300px;\r\n        }\r\n    }\r\n}\r\n\r\n.el-tabs {\r\n    --el-tabs-header-height: 51px;\r\n}\r\n\r\n.demo-tabs {\r\n    margin-left: 10px;\r\n}\r\n\r\n.title {\r\n    margin: 40px 0px 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-left: 20px;\r\n    font-family: \"Microsoft YaHei\";\r\n\r\n}\r\n\r\n.close_box {\r\n    width: 40px;\r\n    height: 40px;\r\n    position: absolute;\r\n    top: 15x;\r\n    right: -50px;\r\n    border-radius: 20px;\r\n    cursor: pointer;\r\n    background-color: rgb(227, 222, 222);\r\n    // 背景线性渐变\r\n    // background: linear-gradient(to bottom right, pink, yellow, violet, skyblue);\r\n\r\n\r\n    span {\r\n        font-size: 30px;\r\n        color: rgb(125, 127, 127);\r\n        margin-left: 13px;\r\n        line-height: 35px;\r\n    }\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}